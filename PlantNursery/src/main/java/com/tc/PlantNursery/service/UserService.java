package com.tc.PlantNursery.service;

import com.tc.PlantNursery.DTO.RegisteredStaffResponse;
import com.tc.PlantNursery.entity.User;
import com.tc.PlantNursery.repository.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Random;

@Service
public class UserService {
    @Autowired
    private UserRepo userRepo;

    //User register

    public User registerUser(User user) {
        String plainPassword = user.getPassword();
        String hashedPassword = hashPassword(plainPassword); // Hash the password
        user.setPassword(hashedPassword);
        return userRepo.save(user);
    }

    private String hashPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256"); //SHA-256 hashing algorithm
            byte[] encodedHash = digest.digest(password.getBytes(StandardCharsets.UTF_8));

            StringBuilder hexString = new StringBuilder();
            for (byte b : encodedHash) {
                hexString.append(String.format("%02x", b));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            // Handle the exception
            return null;
        }
    }

    public User validateUserLogin(String email, String password) {
        User foundUser = userRepo.findByEmail(email);
        if (foundUser == null) {
            return null; // User not found
        }

        if (verifyPassword(password, foundUser.getPassword())) {
            return foundUser; // Password matches
        } else {
            return null; // Invalid password
        }
    }

    private boolean verifyPassword(String enteredPassword, String storedHash) {
        String enteredHash = hashPassword(enteredPassword);
        return enteredHash != null && enteredHash.equals(storedHash);
    }


    /*--------------------Admin part---------------------------*/
    public List<User> showStaffUsersForAdmin(){
        return userRepo.findByRole("staff");
    }

    public String deleteStaffById(Long id){
        if (userRepo.existsById(id)) {
            userRepo.deleteById(id);
            return "User with ID " + id + " has been deleted.";
        } else {
            return "User with ID " + id + " does not exist.";
        }
    }


    public RegisteredStaffResponse registerStaffByAdmin(User staff) {
        String autogeneratedPassword = generateRandomPassword();
        staff.setPassword(hashPassword(autogeneratedPassword));
        staff.setRole("staff");

        User registeredStaff = userRepo.save(staff);
        RegisteredStaffResponse response = new RegisteredStaffResponse();
        response.setUser(registeredStaff);
        response.setAutogeneratedPassword(autogeneratedPassword);
        return response;
    }

    private String generateRandomPassword() {
        int leftLimit = 97; // letter 'a'
        int rightLimit = 122; // letter 'z'
        int targetStringLength = 10;
        Random random = new Random();

        String generatedString = random.ints(leftLimit, rightLimit + 1)
                .limit(targetStringLength)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();

        return generatedString;
    }



}
