package com.tc.PlantNursery.controller;

import com.tc.PlantNursery.DTO.LoginResponseDto;
import com.tc.PlantNursery.DTO.RegisteredStaffResponse;
import com.tc.PlantNursery.entity.User;
import com.tc.PlantNursery.repository.UserRepo;
import com.tc.PlantNursery.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;

@RestController
@CrossOrigin
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private UserRepo userRepository;

    @Autowired
    private JavaMailSender javaMailSender;


    @PostMapping("/registerUser")
    public User registerUser(@RequestBody User user){
        return userService.registerUser(user);
    }

    @PostMapping("/login")
    public ResponseEntity<Object> validateLogin(@RequestBody HashMap<String, Object> userDetails) {
        String userName = userDetails.get("username").toString();
        String password = userDetails.get("password").toString();

        User foundUser = userService.validateUserLogin(userName, password);

        if (foundUser == null) {
            return new ResponseEntity<>("Unauthorized access", HttpStatus.UNAUTHORIZED);
        } else {
            LoginResponseDto loginResponseDto = new LoginResponseDto();
            loginResponseDto.setId(foundUser.getId());
            loginResponseDto.setUserName(foundUser.getUserName());
            loginResponseDto.setEmail(foundUser.getEmail());
            loginResponseDto.setRole(foundUser.getRole());

            return new ResponseEntity<>(loginResponseDto, HttpStatus.OK);

        }

    }

    /*-------------------admin controllers----------------------*/
    @GetMapping("/admin/showStaffUsersForAdmin")
    public List<User> showStaffUsersForAdmin(){
        return userService.showStaffUsersForAdmin();
    }

    @DeleteMapping("/admin/deleteStaffById/{id}")
    public String deleteStaffUser(@PathVariable Long id){
        return userService.deleteStaffById(id);
    }

    @PostMapping("/admin/registerStaff")
    public String registerStaffByAdmin(@RequestBody User staff) {
        RegisteredStaffResponse response = userService.registerStaffByAdmin(staff);

        SimpleMailMessage simpleMailMessage = new SimpleMailMessage();

        simpleMailMessage.setTo(staff.getEmail());
        simpleMailMessage.setSubject("Your initial credentials");
        simpleMailMessage.setText("Hello " + staff.getUserName() + ",\n"
                + "Your account has been registered by the admin.\n"
                + "Username: " + staff.getUserName() + "\n"
                + "Password: " + response.getAutogeneratedPassword() + "\n"
                + "Please log in and reset your password.\n"
                + "Thank you for joining!");

        javaMailSender.send(simpleMailMessage);
        return "credentials sent successfully to "+ staff.getEmail();
    }
}
